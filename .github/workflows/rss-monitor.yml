name: RSS Feed Monitor

on:
  schedule:
    # Run daily at 8:00 AM UTC
    - cron: '0 8 * * *'
  workflow_dispatch:
    # Allow manual trigger

jobs:
  monitor-rss-feeds:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Create monitor script
        run: |
          cat > monitor.js << 'SCRIPT_END'
          const Parser = require('rss-parser');
          const fs = require('fs');
          
          const parser = new Parser();
          
          async function createIssue(title, body) {
            const issueData = {
              title: title,
              body: body,
              assignees: ['copilot'],
              labels: ['rss-feed', 'content-request']
            };
            
            const response = await fetch('https://api.github.com/repos/' + process.env.GITHUB_REPOSITORY + '/issues', {
              method: 'POST',
              headers: {
                'Authorization': 'token ' + process.env.GITHUB_TOKEN,
                'Accept': 'application/vnd.github.v3+json',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(issueData)
            });
            
            if (!response.ok) {
              throw new Error('Failed to create issue: ' + response.statusText);
            }
            
            return await response.json();
          }
          
          function sanitizeFilename(title) {
            return title
              .toLowerCase()
              .replace(/[^a-z0-9\s-]/g, '')
              .replace(/\s+/g, '-')
              .replace(/-+/g, '-')
              .trim();
          }
          
          function formatDate(date) {
            return date.toISOString().split('T')[0];
          }
          
          function generateMarkdownTemplate(item, feedName, category) {
            const publishDate = new Date(item.pubDate);
            const filename = formatDate(publishDate) + '-' + sanitizeFilename(item.title) + '.md';
            
            const frontMatter = '---\n' +
              'layout: "post"\n' +
              'title: "' + item.title.replace(/"/g, '\\"') + '"\n' +
              'author: "' + (item.creator || feedName) + '"\n' +
              'description: "' + (item.contentSnippet || item.content || '').substring(0, 200).replace(/"/g, '\\"') + '..."\n' +
              'excerpt_separator: <!--excerpt_end-->\n' +
              'canonical_url: "' + item.link + '"\n' +
              '---';
            
            const content = (item.contentSnippet || item.content || item.title) + '<!--excerpt_end-->\n\n' +
              '[Read the full article](' + item.link + ')';
            
            return {
              filename: filename,
              content: frontMatter + '\n\n' + content
            };
          }
          
          async function main() {
            const feedsConfig = JSON.parse(fs.readFileSync('.github/rss-feeds.json', 'utf8'));
            
            for (const feedConfig of feedsConfig) {
              console.log('Processing feed: ' + feedConfig.name);
              
              try {
                const feed = await parser.parseURL(feedConfig.url);
                const latestItems = feed.items.slice(0, 3);
                
                for (const item of latestItems) {
                  const publishDate = new Date(item.pubDate);
                  const today = new Date();
                  const daysDiff = Math.floor((today - publishDate) / (1000 * 60 * 60 * 24));
                  
                  if (daysDiff <= 7) {
                    const template = generateMarkdownTemplate(item, feedConfig.name, feedConfig.category);
                    
                    const issueTitle = 'New ' + feedConfig.name + ' post: ' + item.title;
                    const issueBody = '## New RSS Feed Item Request\n\n' +
                      '**Feed:** ' + feedConfig.name + '\n' +
                      '**Category:** ' + feedConfig.category + '\n' +
                      '**Published:** ' + item.pubDate + '\n' +
                      '**Link:** ' + item.link + '\n\n' +
                      '### Requested Action\n' +
                      'Please create a new markdown file in the `_posts` directory with the following content:\n\n' +
                      '**Filename:** `_posts/' + template.filename + '`\n\n' +
                      '**Content:**\n' +
                      '```markdown\n' +
                      template.content + '\n' +
                      '```\n\n' +
                      '### Original Description\n' +
                      (item.contentSnippet || item.content || 'No description available') + '\n\n' +
                      '---\n' +
                      '*This issue was automatically created by the RSS Feed Monitor workflow.*';
          
                    try {
                      const issue = await createIssue(issueTitle, issueBody);
                      console.log('Created issue #' + issue.number + ' for: ' + item.title);
                    } catch (error) {
                      console.error('Failed to create issue for ' + item.title + ':', error.message);
                    }
                  } else {
                    console.log('Skipping ' + item.title + ' (published ' + daysDiff + ' days ago)');
                  }
                }
              } catch (error) {
                console.error('Failed to process feed ' + feedConfig.name + ':', error.message);
              }
            }
          }
          
          main().catch(console.error);
          SCRIPT_END
      
      - name: Install dependencies
        run: npm install rss-parser
      
      - name: Monitor RSS feeds and create issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: node monitor.js
